{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["operations","generaEmpty","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","currentGrid","produce","copyGrid","k","neighbors","forEach","x","y","newI","newk","setTimeout","onClick","Math","random","style","display","gridTemplateColumns","map","col","newGrid","gridCopy","width","height","backgroundColor","border","boxSizing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAKMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,EAAE,EAAG,GACL,EAAE,GAAI,GACN,CAAC,GAAI,GACL,CAAC,GAAI,IAGDC,EAAc,WAElB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAfF,GAeeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAK,IAAID,MAfb,KAe6B,kBAAM,MAGjD,OAAOH,GA0GMK,EAvGO,WAAO,IAAD,EACFC,mBAASP,KADP,mBACnBQ,EADmB,KACbC,EADa,OAEIF,oBAAS,GAFb,mBAEnBG,EAFmB,KAEVC,EAFU,KAIpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAEhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAa,SAACE,GAC3B,IADyC,IAAD,WAC/BjB,GACP,IAFsC,eAE7BkB,GACP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EAEbC,GAAQ,GAAKA,EAzCf,IAyCiCC,GAAQ,GAAKA,EAxC9C,KAyCAL,GAAaJ,EAAYQ,GAAMC,OAI/BL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACc,IAAtBH,EAAYf,GAAGkB,IAA0B,IAAdC,IACpCF,EAASjB,GAAGkB,GAAK,IAdZA,EAAI,EAAGA,EAlCV,GAkCuBA,IAAM,EAA1BA,IADFlB,EAAI,EAAGA,EAlCR,GAkCqBA,IAAM,EAA1BA,SAsBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,qCACE,wBACEa,QAAS,WACPjB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MALN,SASGL,EAAU,OAAS,UAEtB,wBACEkB,QAAS,WAEP,IADA,IAAM3B,EAAO,GACJC,EAAI,EAAGA,EA3EV,GA2EuBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAK,IAAID,MA5Eb,KA4E6B,kBAC7ByB,KAAKC,SAAW,GAAM,EAAI,MAKhCrB,EAAQR,IAXZ,oBAgBA,wBACE2B,QAAS,WACPnB,EAAQT,MAFZ,mBAOA,qBACE+B,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAjGb,GAiGa,YAHvB,SAMGzB,EAAK0B,KAAI,SAACjC,EAAMC,GAAP,OACRD,EAAKiC,KAAI,SAACC,EAAKf,GAAN,OACP,qBAEEQ,QAAS,WACP,IAAMQ,EAAUlB,YAAQV,GAAM,SAAC6B,GAC7BA,EAASnC,GAAGkB,GAAKiB,EAASnC,GAAGkB,GAAK,EAAI,KAExCX,EAAQ2B,IAEVL,MAAO,CACLO,MAAO,GACPC,OAAQ,GACRC,gBAAiBhC,EAAKN,GAAGkB,GAAK,OAAS,GACvCqB,OAAQ,kBACRC,UAAW,eAbf,UACUxC,EADV,YACekB,gBC7FZuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e4887e33.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from 'react'\nimport produce from 'immer'\n\nconst numRows = 50\nconst numCols = 50\nconst operations = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [-1, 1],\n  [-1, 0],\n  [-1, -1],\n  [0, -1],\n  [1, -1],\n]\n\nconst generaEmpty = () => {\n  const rows = []\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(new Array(numCols), () => 0))\n  }\n\n  return rows\n}\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(generaEmpty())\n  const [running, setRunning] = useState(false)\n\n  const runningRef = useRef(running)\n  runningRef.current = running\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return\n\n    setGrid((currentGrid) => {\n      return produce(currentGrid, (copyGrid) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0\n            operations.forEach(([x, y]) => {\n              const newI = i + x\n              const newk = k + y\n\n              if (newI >= 0 && newI < numRows && newk >= 0 && newk < numCols) {\n                neighbors += currentGrid[newI][newk]\n              }\n            })\n\n            if (neighbors < 2 || neighbors > 3) {\n              copyGrid[i][k] = 0\n            } else if (currentGrid[i][k] === 0 && neighbors === 3) {\n              copyGrid[i][k] = 1\n            }\n          }\n        }\n      })\n    })\n\n    setTimeout(runSimulation, 100)\n  }, [])\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(!running)\n          if (!running) {\n            runningRef.current = true\n            runSimulation()\n          }\n        }}\n      >\n        {running ? 'stop' : 'start'}\n      </button>\n      <button\n        onClick={() => {\n          const rows = []\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(new Array(numCols), () =>\n                Math.random() < 0.5 ? 1 : 0\n              )\n            )\n          }\n\n          setGrid(rows)\n        }}\n      >\n        random\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generaEmpty())\n        }}\n      >\n        clear\n      </button>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][k] = gridCopy[i][k] ? 0 : 1\n                })\n                setGrid(newGrid)\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? 'pink' : '',\n                border: 'solid 1px black',\n                boxSizing: 'border-box',\n              }}\n            ></div>\n          ))\n        )}\n      </div>\n    </>\n  )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}